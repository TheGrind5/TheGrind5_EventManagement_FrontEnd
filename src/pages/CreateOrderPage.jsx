//Trang t·∫°o order: Trang n√†y s·∫Ω hi·ªÉn th·ªã form ƒë·ªÉ ng∆∞·ªùi d√πng nh·∫≠p th√¥ng tin order

//Import statements ƒë·ªÉ import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
import React, {useState, useEffect} from 'react'; 
import {useParams, useSearchParams, useLocation, useNavigate} from 'react-router-dom'; 
import Header from '../components/layout/Header';
import VoucherSelector from '../components/common/VoucherSelector';
import StageViewer from '../components/stage/StageViewer';
import { useAuth } from '../contexts/AuthContext';

    //event api ƒë·ªÉ l·∫•y th√¥ng tin event t·ª´ backend
import {eventsAPI, ordersAPI, ticketsAPI} from '../services/apiClient';

const CreateOrderPage = () => {

    //State declaration ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i c·ªßa component
    const {id} = useParams(); //L·∫•y id t·ª´ url 
    const [searchParams] = useSearchParams(); //L·∫•y query params t·ª´ URL
    const location = useLocation(); //L·∫•y state t·ª´ navigation
    const navigate = useNavigate(); //Navigation hook
    const { user, loading: authLoading } = useAuth(); //Auth context
    const [quantity, setQuantity] = useState(1); 
    /*  useState l√† m·ªôt hook trong React ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i c·ªßa component.
        useState tr·∫£ v·ªÅ m·ªôt m·∫£ng g·ªìm hai ph·∫ßn t·ª≠: ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n l√† gi√° tr·ªã hi·ªán t·∫°i c·ªßa tr·∫°ng th√°i, ph·∫ßn t·ª≠ th·ª© hai l√† h√†m ƒë·ªÉ c·∫≠p nh·∫≠t gi√° tr·ªã c·ªßa tr·∫°ng th√°i.
        quantity l√† gi√° tr·ªã hi·ªán t·∫°i c·ªßa tr·∫°ng th√°i, setQuantity l√† h√†m ƒë·ªÉ c·∫≠p nh·∫≠t gi√° tr·ªã c·ªßa tr·∫°ng th√°i.
        1 l√† gi√° tr·ªã m·∫∑c ƒë·ªãnh c·ªßa tr·∫°ng th√°i. */
    
    const[event, setEvent] = useState(null); 
    const[ticketTypes, setTicketTypes] = useState([]);
    const[selectedTicketType, setSelectedTicketType] = useState('');
    const[loading, setLoading] = useState(true);
    const[error, setError] = useState(null);
    const[creatingOrder, setCreatingOrder] = useState(false);
    const[orderSuccess, setOrderSuccess] = useState(false);
    const[appliedVoucher, setAppliedVoucher] = useState(null);
    const[venueLayout, setVenueLayout] = useState(null);
    const[selectedArea, setSelectedArea] = useState(null);

    // Check if coming from wishlist
    const isFromWishlist = location.state?.fromWishlist || false;
    const selectedWishlistItems = location.state?.selectedWishlistItems || [];
        
    //useEffect hook ƒë·ªÉ l·∫•y th√¥ng tin event t·ª´ backend
    useEffect(() => {
        // Check authentication first
        if (!authLoading && !user) {
            setError('B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ t·∫°o ƒë∆°n h√†ng');
            setLoading(false);
            return;
        }

        // Check token exists
        const token = localStorage.getItem('token');
        if (!token) {
            setError('Token kh√¥ng t·ªìn t·∫°i. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i');
            setLoading(false);
            return;
        }

        const fetchEventData = async () => {
            try{
                setLoading(true); 
                setError(null); // Ch∆∞a fetch th√¨ ch∆∞a c√≥ l·ªói
                
                // Fetch event data
                const eventData = await eventsAPI.getById(id);
                console.log('Event data: ', eventData);
                setEvent(eventData?.data ?? eventData);
                
                // Fetch ticket types separately
                let ticketTypesData;
                try {
                    ticketTypesData = await ticketsAPI.getTicketTypesByEvent(id);
                    console.log('üîç DEBUG TICKET TYPES API:');
                    console.log('Ticket Types API Response: ', ticketTypesData);
                    console.log('Ticket Types Data: ', ticketTypesData?.data);
                    console.log('Ticket Types Count: ', ticketTypesData?.data?.length || 0);
                    
                    const ticketTypesArray = ticketTypesData?.data || [];
                    console.log('üîç DEBUG: Setting ticket types:', ticketTypesArray);
                    setTicketTypes(ticketTypesArray);
                    
                    // Check if no ticket types found
                    if (ticketTypesArray.length === 0) {
                        console.warn('üîç DEBUG: No ticket types found for event', id);
                        setError('S·ª± ki·ªán n√†y ch∆∞a c√≥ lo·∫°i v√© n√†o ƒë·ªÉ ƒë·∫∑t');
                        return;
                    }
                } catch (ticketTypesError) {
                    console.error('üîç DEBUG: Error fetching ticket types:', ticketTypesError);
                    setError('Kh√¥ng th·ªÉ t·∫£i danh s√°ch lo·∫°i v√©. Vui l√≤ng th·ª≠ l·∫°i sau.');
                    return;
                }
                
                // Fetch venue layout if available
                try {
                    const layoutResponse = await eventsAPI.getVenueLayout(id);
                    console.log('Venue layout response:', layoutResponse);
                    if (layoutResponse?.data && layoutResponse.data.hasVirtualStage) {
                        setVenueLayout(layoutResponse.data);
                    }
                } catch (layoutError) {
                    console.log('No venue layout available or error:', layoutError);
                    // Venue layout is optional, so we don't set error
                }
                
                // Auto-select ticket type from URL params if provided
                const ticketTypeFromUrl = searchParams.get('ticketType');
                console.log('üîç DEBUG URL PARAMS:');
                console.log('ticketTypeFromUrl:', ticketTypeFromUrl);
                console.log('ticketTypeFromUrl type:', typeof ticketTypeFromUrl);
                console.log('ticketTypesData:', ticketTypesData);
                
                if (ticketTypeFromUrl) {
                    // üîß FIX: Convert to number for comparison
                    const ticketTypeId = parseInt(ticketTypeFromUrl);
                    console.log('üîç DEBUG: Looking for ticketTypeId:', ticketTypeId);
                    
                    const foundTicketType = ticketTypesData?.data?.find(tt => tt.ticketTypeId === ticketTypeId);
                    console.log('üîç DEBUG: Found ticket type:', foundTicketType);
                    
                    if (foundTicketType) {
                        setSelectedTicketType(ticketTypeFromUrl); // Keep as string for form
                        console.log('Auto-selected ticket type:', foundTicketType.typeName);
                    } else {
                        console.warn('üîç DEBUG: Ticket type not found in fetched data');
                        console.log('Available ticket types:', ticketTypesData?.data?.map(tt => ({ id: tt.ticketTypeId, name: tt.typeName })));
                    }
                }

                // Handle wishlist items if coming from wishlist
                if (isFromWishlist && selectedWishlistItems.length > 0) {
                    console.log('Processing wishlist items:', selectedWishlistItems);
                    // We need to get the ticket type ID from the wishlist item
                    // For now, we'll need to fetch the wishlist data to get the ticket type ID
                    // This is a temporary solution - in a real app, pass ticket type ID directly
                    try {
                        const { wishlistAPI } = await import('../services/apiClient');
                        const wishlistData = await wishlistAPI.getWishlist();
                        const wishlistItem = (wishlistData?.data?.items || wishlistData?.items || []).find(item => 
                            selectedWishlistItems.includes(item.id)
                        );
                        if (wishlistItem) {
                            setSelectedTicketType(wishlistItem.ticketTypeId.toString());
                        }
                    } catch (error) {
                        console.error('Error fetching wishlist data:', error);
                    }
                }

                // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ ticket types
                const ticketArray = ticketTypesData?.data || ticketTypesData || [];
                if (!ticketArray || ticketArray.length === 0) {
                    setError('S·ª± ki·ªán n√†y ch∆∞a c√≥ lo·∫°i v√© n√†o ƒë·ªÉ ƒë·∫∑t');
                    setTicketTypes([]);
                }

            }catch(error){
                console.error('L·ªói ko fetch ƒëc event :(', error);
                setError('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin s·ª± ki·ªán. Vui l√≤ng th·ª≠ l·∫°i sau.');
            } finally {
                setLoading(false);
            }
        };
        if(id && user){
            fetchEventData();
        }
    }, [id, user, authLoading])

        // Debug useEffect ƒë·ªÉ ki·ªÉm tra event state - REMOVED ƒë·ªÉ tr√°nh infinite loop

    
    //Handle functions ƒë·ªÉ x·ª≠ l√Ω event
    const handleCreateOrder = async (e) => {
        e.preventDefault(); // NgƒÉn form submit m·∫∑c ƒë·ªãnh
        
        // üîß FIX: C·∫£i thi·ªán validation v·ªõi business rules
        if (!selectedTicketType) {
            setError('Vui l√≤ng ch·ªçn lo·∫°i v√©');
            return;
        }

        if (quantity <= 0) {
            setError('S·ªë l∆∞·ª£ng v√© ph·∫£i l·ªõn h∆°n 0');
            return;
        }

        if (!id || isNaN(parseInt(id))) {
            setError('ID s·ª± ki·ªán kh√¥ng h·ª£p l·ªá');
            return;
        }

        // üîß FIX: Validate ticket type availability v·ªõi business rules
        const selectedTicket = ticketTypes.find(tt => tt.ticketTypeId == selectedTicketType);
        if (selectedTicket) {
            // Check if ticket type is active
            if (selectedTicket.status !== 'Active') {
                setError('Lo·∫°i v√© n√†y hi·ªán kh√¥ng kh·∫£ d·ª•ng');
                return;
            }

            // Check sale time
            const now = new Date();
            if (selectedTicket.saleStart && new Date(selectedTicket.saleStart) > now) {
                setError(`V√© ch∆∞a ƒë∆∞·ª£c b√°n. Th·ªùi gian b√°n b·∫Øt ƒë·∫ßu: ${new Date(selectedTicket.saleStart).toLocaleString('vi-VN')}`);
                return;
            }

            if (selectedTicket.saleEnd && new Date(selectedTicket.saleEnd) < now) {
                setError(`H·∫øt th·ªùi gian b√°n v√©. Th·ªùi gian b√°n k·∫øt th√∫c: ${new Date(selectedTicket.saleEnd).toLocaleString('vi-VN')}`);
                return;
            }

            // Check availability - s·ª≠ d·ª•ng strict comparison
            if (selectedTicket.availableQuantity < quantity) {
                setError(`Ch·ªâ c√≤n ${selectedTicket.availableQuantity} v√©. Vui l√≤ng ch·ªçn s·ªë l∆∞·ª£ng √≠t h∆°n.`);
                return;
            }

            // Check min/max order rules
            if (selectedTicket.minOrder && quantity < selectedTicket.minOrder) {
                setError(`S·ªë l∆∞·ª£ng t·ªëi thi·ªÉu l√† ${selectedTicket.minOrder} v√©.`);
                return;
            }

            if (selectedTicket.maxOrder && quantity > selectedTicket.maxOrder) {
                setError(`S·ªë l∆∞·ª£ng t·ªëi ƒëa l√† ${selectedTicket.maxOrder} v√©.`);
                return;
            }

            // Check if user has sufficient balance (if using wallet payment)
            if (appliedVoucher && appliedVoucher.finalAmount > 0) {
                // This will be validated on backend, but we can show a warning
                console.log('Voucher applied, final amount:', appliedVoucher.finalAmount);
            }
        } else {
            setError('Lo·∫°i v√© ƒë∆∞·ª£c ch·ªçn kh√¥ng t·ªìn t·∫°i');
            return;
        }

        try {
            setCreatingOrder(true);
            setError(null);
            
            // üîç DEBUG: Log ticket type validation
            console.log('üîç DEBUG TICKET TYPE VALIDATION:');
            console.log('selectedTicketType:', selectedTicketType);
            console.log('selectedTicketType type:', typeof selectedTicketType);
            console.log('ticketTypes:', ticketTypes);
            console.log('selectedTicket:', ticketTypes.find(tt => tt.ticketTypeId == selectedTicketType));
            
            // Validate ticket type exists before sending - s·ª≠ d·ª•ng strict comparison
            const selectedTicket = ticketTypes.find(tt => tt.ticketTypeId == selectedTicketType);
            if (!selectedTicket) {
                setError('Lo·∫°i v√© ƒë∆∞·ª£c ch·ªçn kh√¥ng t·ªìn t·∫°i trong danh s√°ch');
                return;
            }
            
            // T·∫°o order data - s·ª≠ d·ª•ng PascalCase v√¨ backend expect PascalCase
            const orderData = {
                EventId: parseInt(id),
                TicketTypeId: parseInt(selectedTicketType),
                Quantity: quantity,
                SeatNo: null, // C√≥ th·ªÉ th√™m seat selection sau
                VoucherCode: appliedVoucher?.voucherCode || null // Th√™m voucher code
            };
            
            // G·ªçi API t·∫°o order
            const response = await ordersAPI.create(orderData);
            
            // Debug: Log to√†n b·ªô response ƒë·ªÉ xem c·∫•u tr√∫c
            console.log('Full API response:', response);
            console.log('Response data:', response.data);
            
            // Hi·ªÉn th·ªã th√†nh c√¥ng
            setOrderSuccess(true);
            
            // üîß FIX: Handle different response structures
            let orderId;
            if (response.data?.order?.orderId) {
                orderId = response.data.order.orderId;
                console.log('Found orderId in response.data.order.orderId:', orderId);
            } else if (response.data?.orderId) {
                orderId = response.data.orderId;
                console.log('Found orderId in response.data.orderId:', orderId);
            } else if (response.order?.orderId) {
                orderId = response.order.orderId;
                console.log('Found orderId in response.order.orderId:', orderId);
            } else {
                console.error('Cannot find orderId in response:', response);
                console.error('Response structure analysis:');
                console.error('- response.data:', response.data);
                console.error('- response.data?.order:', response.data?.order);
                console.error('- response.order:', response.order);
                setError('Kh√¥ng th·ªÉ l·∫•y ID ƒë∆°n h√†ng t·ª´ ph·∫£n h·ªìi');
                return;
            }
            
            
            // üîß FIX: S·ª≠ d·ª•ng React Router thay v√¨ window.location ƒë·ªÉ preserve state
            setTimeout(() => {
                const selectedTicketForNav = ticketTypes.find(tt => tt.ticketTypeId == selectedTicketType);
                if (selectedTicketForNav && (selectedTicketForNav.isFree || selectedTicketForNav.price === 0)) {
                    navigate(`/order-confirmation/${orderId}`, {
                        state: {
                            order: response.data?.order || response.order,
                            fromOrderCreation: true
                        }
                    });
                } else {
                    navigate(`/payment/${orderId}`, {
                        state: {
                            order: response.data?.order || response.order,
                            fromOrderCreation: true,
                            orderData: orderData
                        }
                    });
                }
            }, 2000);
            
        } catch (error) {
            
            // üîß FIX: C·∫£i thi·ªán error handling v·ªõi nhi·ªÅu fallback options
            let errorMessage = 'C√≥ l·ªói x·∫£y ra khi t·∫°o ƒë∆°n h√†ng';
            let errorCode = 500;
            
            // Parse error t·ª´ apiClient response format
            if (error.success === false) {
                errorMessage = error.message || errorMessage;
                errorCode = error.code || 500;
            }
            // Parse error t·ª´ axios response
            else if (error.response?.data?.message) {
                errorMessage = error.response.data.message;
                errorCode = error.response.status;
            }
            // Parse error t·ª´ fetch response
            else if (error.data?.message) {
                errorMessage = error.data.message;
            }
            // Parse error t·ª´ exception message
            else if (error.message) {
                errorMessage = error.message;
            }
            
            
            // üîß FIX: Th√™m specific error handling cho c√°c tr∆∞·ªùng h·ª£p th∆∞·ªùng g·∫∑p
            if (errorCode === 401) {
                errorMessage = 'Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.';
                // Auto redirect to login after 3 seconds
                setTimeout(() => {
                    navigate('/login');
                }, 3000);
            } else if (errorCode === 400) {
                // Keep the specific error message from backend
            } else if (errorCode === 0) {
                errorMessage = 'L·ªói k·∫øt n·ªëi. Vui l√≤ng ki·ªÉm tra internet v√† th·ª≠ l·∫°i.';
            }
            
            setError(errorMessage);
        } finally {
            setCreatingOrder(false);
        }
    };

    // Voucher handling functions
    const handleVoucherApplied = (voucherData) => {
        setAppliedVoucher(voucherData);
        console.log('Voucher applied:', voucherData);
    };

    const handleRemoveVoucher = () => {
        setAppliedVoucher(null);
        console.log('Voucher removed');
    };

    // Handle area selection from virtual stage
    const handleAreaSelection = (selection) => {
        console.log('Area selected:', selection);
        setSelectedArea(selection.area);
        if (selection.area.ticketTypeId) {
            setSelectedTicketType(selection.area.ticketTypeId.toString());
        }
        if (selection.quantity > 0) {
            setQuantity(selection.quantity);
        }
    };

    // Calculate pricing with voucher - memoized ƒë·ªÉ tr√°nh re-render
    const pricing = React.useMemo(() => {
        if (!selectedTicketType || !ticketTypes.length) return null;
        
        const ticketType = ticketTypes.find(tt => tt.ticketTypeId == selectedTicketType);
        if (!ticketType) return null;

        const originalAmount = ticketType.price * quantity;
        let finalAmount = originalAmount;
        let discountAmount = 0;

        if (appliedVoucher) {
            discountAmount = appliedVoucher.discountAmount;
            finalAmount = appliedVoucher.finalAmount;
        }

        return {
            originalAmount,
            discountAmount,
            finalAmount,
            ticketType
        };
    }, [selectedTicketType, ticketTypes, quantity, appliedVoucher]);

    // Debug useEffect ƒë·ªÉ ki·ªÉm tra pricing - REMOVED ƒë·ªÉ tr√°nh infinite loop


    //Return JSX ƒë·ªÉ hi·ªÉn th·ªã form
    return (
        <div>
            <Header />
            <div className="create-order-container"> 
                <div className="create-order-card">
                    {/* Hi·ªÉn th·ªã loading state */}
                    {loading && (
                        <div className="alert alert-info">
                            <div className="spinner-border spinner-border-sm me-2" role="status">
                                <span className="visually-hidden">Loading...</span>
                            </div>
                            ƒêang t·∫£i th√¥ng tin s·ª± ki·ªán...
                        </div>
                    )}

                    {/* Hi·ªÉn th·ªã error message */}
                    {error && (
                        <div className="alert alert-danger">
                            <div>
                                <strong>L·ªói:</strong> {error}
                            </div>
                            {error.includes('ƒëƒÉng nh·∫≠p') ? (
                                <button 
                                    type="button" 
                                    className="btn btn-primary btn-sm ms-2"
                                    onClick={() => navigate('/login')}
                                >
                                    ƒêƒÉng nh·∫≠p
                                </button>
                            ) : (
                                <button 
                                    type="button" 
                                    className="btn btn-outline-danger btn-sm ms-2"
                                    onClick={() => window.location.reload()}
                                >
                                    Th·ª≠ l·∫°i
                                </button>
                            )}
                        </div>
                    )}

                    {/* Hi·ªÉn th·ªã success message */}
                    {orderSuccess && (
                        <div className="alert alert-success">
                            <h4>üéâ T·∫°o ƒë∆°n h√†ng th√†nh c√¥ng!</h4>
                            <p>ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng. ƒêang chuy·ªÉn h∆∞·ªõng...</p>
                        </div>
                    )}

                    {/* Hi·ªÉn th·ªã form khi kh√¥ng c√≥ l·ªói v√† kh√¥ng loading */}
                    {!loading && !error && !orderSuccess && (
                        <>
                            <h1 className="create-order-title">Create Order - {event?.title || event?.Title}</h1>
                            
                            <div className="event-info">
                                <h3>üìÖ Th√¥ng tin s·ª± ki·ªán</h3>
                                <p><strong>S·ª± ki·ªán:</strong> {event?.title || event?.Title}</p>
                                <p><strong>ƒê·ªãa ƒëi·ªÉm:</strong> {event?.location || event?.Location}</p>
                                <p><strong>M√¥ t·∫£:</strong> {event?.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}</p>
                            </div>

                            {/* Virtual Stage Viewer */}
                            {venueLayout && venueLayout.hasVirtualStage && (
                                <div className="venue-layout-container" style={{ marginBottom: '20px' }}>
                                    <h3>üó∫Ô∏è Ch·ªçn Khu V·ª±c</h3>
                                    <StageViewer 
                                        layout={venueLayout}
                                        ticketTypes={ticketTypes}
                                        onAreaClick={handleAreaSelection}
                                    />
                                    {selectedArea && (
                                        <div className="alert alert-success" style={{ marginTop: '10px' }}>
                                            <p><strong>Khu v·ª±c ƒë√£ ch·ªçn:</strong> {selectedArea.name}</p>
                                        </div>
                                    )}
                                </div>
                            )}

                            <form className="order-form">
                                {/* Hi·ªÉn th·ªã th√¥ng tin v√© ƒë√£ ch·ªçn n·∫øu c√≥ ticketType t·ª´ URL */}
                                {selectedTicketType && (
                                    <div className="selected-ticket-info">
                                        <h3>üé´ V√© ƒë√£ ch·ªçn</h3>
                                        {(() => {
                                            const selectedTicket = ticketTypes.find(tt => tt.ticketTypeId == selectedTicketType);
                                            return selectedTicket ? (
                                                <div className="ticket-info-card">
                                                    <h4>{selectedTicket.typeName}</h4>
                                                    <p><strong>Gi√°:</strong> {selectedTicket.price?.toLocaleString()} VND</p>
                                                    <p><strong>S·ªë l∆∞·ª£ng c√≤n l·∫°i:</strong> {selectedTicket.availableQuantity}</p>
                                                    {selectedTicket.minOrder && (
                                                        <p><strong>T·ªëi thi·ªÉu:</strong> {selectedTicket.minOrder} v√©</p>
                                                    )}
                                                    {selectedTicket.maxOrder && (
                                                        <p><strong>T·ªëi ƒëa:</strong> {selectedTicket.maxOrder} v√©</p>
                                                    )}
                                                </div>
                                            ) : null;
                                        })()}
                                    </div>
                                )}

                                <div className="form-group">
                                    <label>üé´ Lo·∫°i v√©</label>
                                    {selectedTicketType ? (
                                        <div className="selected-ticket-display">
                                            <p>ƒê√£ ch·ªçn: {ticketTypes.find(tt => tt.ticketTypeId == selectedTicketType)?.typeName}</p>
                                            <button 
                                                type="button" 
                                                className="btn btn-secondary btn-sm"
                                                onClick={() => setSelectedTicketType('')}
                                            >
                                                Ch·ªçn l·∫°i
                                            </button>
                                        </div>
                                    ) : (
                                        <select 
                                            className="form-control"
                                            value={selectedTicketType}
                                            onChange={(e) => setSelectedTicketType(e.target.value)}
                                        >
                                            <option value="">Ch·ªçn lo·∫°i v√©</option>
                                            {ticketTypes.map(ticketType => (
                                            <option key={ticketType.ticketTypeId} value={ticketType.ticketTypeId}>
                                                {ticketType.typeName} - {ticketType.price?.toLocaleString()} VND
                                                </option>
                                            ))}
                                        </select>
                                    )}
                                </div>

                                <div className="form-group">
                                    <label>üî¢ S·ªë l∆∞·ª£ng</label>
                                    <input type="number"
                                           className="form-control"
                                           value={quantity}
                                           onChange={(e) => setQuantity(parseInt(e.target.value) || 1)}
                                           min="1" 
                                           placeholder="Nh·∫≠p s·ªë l∆∞·ª£ng v√©"/>
                                </div>

                                {/* Voucher Selector */}
                                {selectedTicketType && quantity > 0 && pricing && (
                                    <VoucherSelector
                                        originalAmount={pricing.originalAmount}
                                        onVoucherApplied={handleVoucherApplied}
                                        appliedVoucher={appliedVoucher}
                                        onRemoveVoucher={handleRemoveVoucher}
                                    />
                                )}

                                {/* Hi·ªÉn th·ªã t·ªïng ti·ªÅn */}
                                {selectedTicketType && quantity > 0 && pricing && (
                                    <div className="form-group">
                                        <div className="alert alert-info">
                                            <h5>üí∞ T·ªïng ti·ªÅn:</h5>
                                            <p><strong>Lo·∫°i v√©:</strong> {pricing.ticketType.typeName}</p>
                                            <p><strong>ƒê∆°n gi√°:</strong> {pricing.ticketType.price?.toLocaleString()} VND</p>
                                            <p><strong>S·ªë l∆∞·ª£ng:</strong> {quantity}</p>
                                            
                                            {appliedVoucher ? (
                                                <>
                                                    <p><strong>Gi√° g·ªëc:</strong> <span className="text-decoration-line-through">{pricing.originalAmount.toLocaleString()} VND</span></p>
                                                    <p><strong>Gi·∫£m gi√°:</strong> <span className="text-danger">-{pricing.discountAmount.toLocaleString()} VND</span></p>
                                                    <p><strong>T·ªïng c·ªông:</strong> <span className="text-success fw-bold">{pricing.finalAmount.toLocaleString()} VND</span></p>
                                                    <p><strong>Voucher:</strong> <span className="text-primary">{appliedVoucher.voucherCode} (-{appliedVoucher.discountPercentage}%)</span></p>
                                                </>
                                            ) : (
                                                <p><strong>T·ªïng c·ªông:</strong> <span className="text-success fw-bold">{pricing.originalAmount.toLocaleString()} VND</span></p>
                                            )}
                                        </div>
                                    </div>
                                )}

                                <button 
                                    type="submit" 
                                    className="btn-create-order" 
                                    onClick={handleCreateOrder}
                                    disabled={creatingOrder}
                                >
                                    {creatingOrder ? (
                                        <>
                                            <div className="spinner-border spinner-border-sm me-2" role="status">
                                                <span className="visually-hidden">Loading...</span>
                                            </div>
                                            ƒêang t·∫°o ƒë∆°n h√†ng...
                                        </>
                                    ) : (
                                        'üöÄ T·∫°o ƒë∆°n h√†ng'
                                    )}
                                </button>
                            </form>
                        </>
                    )}
                </div>
            </div>
        </div>
    );
};
export default CreateOrderPage;
