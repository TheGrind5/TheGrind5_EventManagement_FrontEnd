//Trang t·∫°o order: Trang n√†y s·∫Ω hi·ªÉn th·ªã form ƒë·ªÉ ng∆∞·ªùi d√πng nh·∫≠p th√¥ng tin order

//Import statements ƒë·ªÉ import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
import React, {useState, useEffect} from 'react'; 
import {useParams} from 'react-router-dom'; 
import Header from '../components/Header';
import { AddToWishlistButton } from '../features/wishlist';

    //event api ƒë·ªÉ l·∫•y th√¥ng tin event t·ª´ backend
import {eventsAPI, ordersAPI} from '../services/api';

const CreateOrderPage = () => {

    //State declaration ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i c·ªßa component
    const {id} = useParams(); //L·∫•y id t·ª´ url 
    const [quantity, setQuantity] = useState(1); 
    /*  useState l√† m·ªôt hook trong React ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i c·ªßa component.
        useState tr·∫£ v·ªÅ m·ªôt m·∫£ng g·ªìm hai ph·∫ßn t·ª≠: ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n l√† gi√° tr·ªã hi·ªán t·∫°i c·ªßa tr·∫°ng th√°i, ph·∫ßn t·ª≠ th·ª© hai l√† h√†m ƒë·ªÉ c·∫≠p nh·∫≠t gi√° tr·ªã c·ªßa tr·∫°ng th√°i.
        quantity l√† gi√° tr·ªã hi·ªán t·∫°i c·ªßa tr·∫°ng th√°i, setQuantity l√† h√†m ƒë·ªÉ c·∫≠p nh·∫≠t gi√° tr·ªã c·ªßa tr·∫°ng th√°i.
        1 l√† gi√° tr·ªã m·∫∑c ƒë·ªãnh c·ªßa tr·∫°ng th√°i. */
    
    const[event, setEvent] = useState(null); 
    const[ticketTypes, setTicketTypes] = useState([]);
    const[selectedTicketType, setSelectedTicketType] = useState('');
    const[loading, setLoading] = useState(true);
    const[error, setError] = useState(null);
    const[creatingOrder, setCreatingOrder] = useState(false);
    const[orderSuccess, setOrderSuccess] = useState(false);

        
    //useEffect hook ƒë·ªÉ l·∫•y th√¥ng tin event t·ª´ backend
    useEffect(() => {
        const fetchEventData = async () => {
            try{
                setLoading(true); 
                setError(null); // Ch∆∞a fetch th√¨ ch∆∞a c√≥ l·ªói
                const eventData = await eventsAPI.getById(id);
                console.log('Event data: ', eventData);
                console.log('Ticket Types: ', eventData.ticketTypes);
                console.log('Setting event state with:', eventData);
                setEvent(eventData);
                setTicketTypes(eventData.ticketTypes || []);
                console.log('Event state should be set now');

                // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ ticket types
                if (!eventData.ticketTypes || eventData.ticketTypes.length === 0) {
                    setError('S·ª± ki·ªán n√†y ch∆∞a c√≥ lo·∫°i v√© n√†o ƒë·ªÉ ƒë·∫∑t');
                    setTicketTypes([]);
                }

            }catch(error){
                console.error('L·ªói ko fetch ƒëc event :(', error);
                setError('Kh√¥ng th·ªÉ t·∫£i th√¥ng tin s·ª± ki·ªán. Vui l√≤ng th·ª≠ l·∫°i sau.');
            } finally {
                setLoading(false);
            }
        };
        if(id){
            fetchEventData();
        }
    }, [id])

        // Debug useEffect ƒë·ªÉ ki·ªÉm tra event state
    useEffect(() => {
        console.log('Event state changed:', event);
        console.log('Loading state:', loading);
        console.log('Error state:', error);
    }, [event, loading, error]);

    
    //Handle functions ƒë·ªÉ x·ª≠ l√Ω event
    const handleCreateOrder = async (e) => {
        e.preventDefault(); // NgƒÉn form submit m·∫∑c ƒë·ªãnh
        
        // Validate form
        if (!selectedTicketType) {
            setError('Vui l√≤ng ch·ªçn lo·∫°i v√©');
            return;
        }

        if (quantity <= 0) {
            setError('S·ªë l∆∞·ª£ng v√© ph·∫£i l·ªõn h∆°n 0');
            return;
        }

        try {
            setCreatingOrder(true);
            setError(null);
            
            // T·∫°o order data
            const orderData = {
                eventId: parseInt(id),
                ticketTypeId: parseInt(selectedTicketType),
                quantity: quantity,
                seatNo: null // C√≥ th·ªÉ th√™m seat selection sau
            };
            
            console.log('Creating order with data:', orderData);
            
            // G·ªçi API t·∫°o order
            const response = await ordersAPI.create(orderData);
            
            console.log('Order created successfully:', response);
            
            // Hi·ªÉn th·ªã th√†nh c√¥ng
            setOrderSuccess(true);
            
            // Redirect ƒë·∫øn order details ho·∫∑c order list sau 2 gi√¢y
            setTimeout(() => {
                window.location.href = '/dashboard'; // Ho·∫∑c redirect ƒë·∫øn order details
            }, 2000);
            
        } catch (error) {
            console.error('Error creating order:', error);
            setError(error.message || 'C√≥ l·ªói x·∫£y ra khi t·∫°o ƒë∆°n h√†ng');
        } finally {
            setCreatingOrder(false);
        }
    };


    //Return JSX ƒë·ªÉ hi·ªÉn th·ªã form
    return (
        <div>
            <Header />
            <div className="create-order-container"> 
                <div className="create-order-card">
                    {/* Hi·ªÉn th·ªã loading state */}
                    {loading && (
                        <div className="alert alert-info">
                            <div className="spinner-border spinner-border-sm me-2" role="status">
                                <span className="visually-hidden">Loading...</span>
                            </div>
                            ƒêang t·∫£i th√¥ng tin s·ª± ki·ªán...
                        </div>
                    )}

                    {/* Hi·ªÉn th·ªã error message */}
                    {error && (
                        <div className="alert alert-danger">
                            <div>
                                <strong>L·ªói:</strong> {error}
                            </div>
                            <button 
                                type="button" 
                                className="btn btn-outline-danger btn-sm ms-2"
                                onClick={() => window.location.reload()}
                            >
                                Th·ª≠ l·∫°i
                            </button>
                        </div>
                    )}

                    {/* Hi·ªÉn th·ªã success message */}
                    {orderSuccess && (
                        <div className="alert alert-success">
                            <h4>üéâ T·∫°o ƒë∆°n h√†ng th√†nh c√¥ng!</h4>
                            <p>ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng. ƒêang chuy·ªÉn h∆∞·ªõng...</p>
                        </div>
                    )}

                    {/* Hi·ªÉn th·ªã form khi kh√¥ng c√≥ l·ªói v√† kh√¥ng loading */}
                    {!loading && !error && !orderSuccess && (
                        <>
                            <h1 className="create-order-title">Create Order - {event?.title || event?.Title}</h1>
                            
                            <div className="event-info">
                                <h3>üìÖ Th√¥ng tin s·ª± ki·ªán</h3>
                                <p><strong>S·ª± ki·ªán:</strong> {event?.title || event?.Title}</p>
                                <p><strong>ƒê·ªãa ƒëi·ªÉm:</strong> {event?.location || event?.Location}</p>
                                <p><strong>M√¥ t·∫£:</strong> {event?.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}</p>
                            </div>

                            <form className="order-form">
                                <div className="form-group">
                                    <label>üé´ Lo·∫°i v√©</label>
                                    <select 
                                        className="form-control"
                                        value={selectedTicketType}
                                        onChange={(e) => setSelectedTicketType(e.target.value)}
                                    >
                                        <option value="">Ch·ªçn lo·∫°i v√©</option>
                                        {ticketTypes.map(ticketType => (
                                        <option key={ticketType.ticketTypeId} value={ticketType.ticketTypeId}>
                                            {ticketType.typeName} - {ticketType.price?.toLocaleString()} VND
                                            </option>
                                        ))}
                                    </select>
                                </div>

                                <div className="form-group">
                                    <label>üî¢ S·ªë l∆∞·ª£ng</label>
                                    <input type="number"
                                           className="form-control"
                                           value={quantity}
                                           onChange={(e) => setQuantity(parseInt(e.target.value) || 1)}
                                           min="1" 
                                           placeholder="Nh·∫≠p s·ªë l∆∞·ª£ng v√©"/>
                                </div>

                                {/* Hi·ªÉn th·ªã t·ªïng ti·ªÅn */}
                                {selectedTicketType && quantity > 0 && (
                                    <div className="form-group">
                                        <div className="alert alert-info">
                                            <h5>üí∞ T·ªïng ti·ªÅn:</h5>
                                            {(() => {
                                                const ticketType = ticketTypes.find(tt => tt.ticketTypeId === parseInt(selectedTicketType));
                                                if (ticketType) {
                                                    const totalAmount = ticketType.price * quantity;
                                                    return (
                                                        <>
                                                            <p><strong>Lo·∫°i v√©:</strong> {ticketType.typeName}</p>
                                                            <p><strong>ƒê∆°n gi√°:</strong> {ticketType.price?.toLocaleString()} VND</p>
                                                            <p><strong>S·ªë l∆∞·ª£ng:</strong> {quantity}</p>
                                                            <p><strong>T·ªïng c·ªông:</strong> <span className="text-success fw-bold">{totalAmount.toLocaleString()} VND</span></p>
                                                        </>
                                                    );
                                                }
                                                return null;
                                            })()}
                                        </div>
                                    </div>
                                )}

                                <div style={{ display: 'flex', gap: '12px', alignItems: 'center', flexWrap: 'wrap' }}>
                                    <button 
                                        type="submit" 
                                        className="btn-create-order" 
                                        onClick={handleCreateOrder}
                                        disabled={creatingOrder}
                                    >
                                        {creatingOrder ? (
                                            <>
                                                <div className="spinner-border spinner-border-sm me-2" role="status">
                                                    <span className="visually-hidden">Loading...</span>
                                                </div>
                                                ƒêang t·∫°o ƒë∆°n h√†ng...
                                            </>
                                        ) : (
                                            'üöÄ T·∫°o ƒë∆°n h√†ng'
                                        )}
                                    </button>
                                    
                                    {selectedTicketType && (
                                        <AddToWishlistButton 
                                            ticketTypeId={parseInt(selectedTicketType)}
                                            // onSuccess v√† onError callbacks ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω b·ªüi toast notification trong component
                                        />
                                    )}
                                </div>
                            </form>
                        </>
                    )}
                </div>
            </div>
        </div>
    );
};
export default CreateOrderPage;
