import React, { useState, useEffect } from 'react';
import { useParams, useLocation, useNavigate } from 'react-router-dom';
import Header from '../components/layout/Header';
import { ordersAPI, ticketsAPI } from '../services/apiClient';

const OrderConfirmationPage = () => {
    const { orderId } = useParams();
    const location = useLocation();
    const navigate = useNavigate();
    
    // State management
    const [order, setOrder] = useState(null);
    const [tickets, setTickets] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    
    // Get data from navigation state or fetch from API
    useEffect(() => {
        const fetchData = async () => {
            try {
                setLoading(true);
                setError(null);
                
                // Try to get data from navigation state first
                if (location.state?.order) {
                    setOrder(location.state.order);
                } else {
                    // Fetch order details from API
                    const orderData = await ordersAPI.getById(orderId);
                    setOrder(orderData);
                }
                
                // Fetch tickets for this order
                try {
                    const ticketsData = await ticketsAPI.getTicketsByOrder(orderId);
                    setTickets(ticketsData.tickets || []);
                } catch (ticketError) {
                    console.warn('Could not fetch tickets:', ticketError);
                    // Tickets might not be created yet, that's okay
                }
                
            } catch (err) {
                console.error('Error fetching data:', err);
                
                // üîß FIX: C·∫£i thi·ªán error handling v·ªõi specific error messages
                let errorMessage = 'Kh√¥ng th·ªÉ t·∫£i th√¥ng tin ƒë∆°n h√†ng';
                let errorCode = 500;
                
                // Parse error t·ª´ apiClient response format
                if (err.success === false) {
                    errorMessage = err.message || errorMessage;
                    errorCode = err.code || 500;
                }
                // Parse error t·ª´ axios response
                else if (err.response?.data?.message) {
                    errorMessage = err.response.data.message;
                    errorCode = err.response.status;
                }
                // Parse error t·ª´ fetch response
                else if (err.data?.message) {
                    errorMessage = err.data.message;
                }
                // Parse error t·ª´ exception message
                else if (err.message) {
                    errorMessage = err.message;
                }
                
                // üîß FIX: Th√™m specific error handling
                if (errorCode === 404) {
                    errorMessage = 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng. C√≥ th·ªÉ ƒë∆°n h√†ng ƒë√£ b·ªã x√≥a ho·∫∑c kh√¥ng t·ªìn t·∫°i.';
                } else if (errorCode === 401) {
                    errorMessage = 'Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.';
                } else if (errorCode === 0) {
                    errorMessage = 'L·ªói k·∫øt n·ªëi. Vui l√≤ng ki·ªÉm tra internet v√† th·ª≠ l·∫°i.';
                }
                
                setError(errorMessage);
            } finally {
                setLoading(false);
            }
        };
        
        if (orderId) {
            fetchData();
        }
    }, [orderId, location.state]);
    
    // Format currency
    const formatCurrency = (amount) => {
        return new Intl.NumberFormat('vi-VN', {
            style: 'currency',
            currency: 'VND'
        }).format(amount);
    };
    
    // Format date
    const formatDate = (dateString) => {
        return new Date(dateString).toLocaleDateString('vi-VN', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    };
    
    if (loading) {
        return (
            <div>
                <Header />
                <div className="confirmation-container">
                    <div className="confirmation-card">
                        <div className="text-center">
                            <div className="spinner-border" role="status">
                                <span className="visually-hidden">Loading...</span>
                            </div>
                            <p className="mt-3">ƒêang t·∫£i th√¥ng tin x√°c nh·∫≠n...</p>
                        </div>
                    </div>
                </div>
            </div>
        );
    }
    
    if (error || !order) {
        return (
            <div>
                <Header />
                <div className="confirmation-container">
                    <div className="confirmation-card">
                        <div className="alert alert-danger">
                            <h4>‚ùå L·ªói</h4>
                            <p>{error || 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒë∆°n h√†ng'}</p>
                            <button 
                                className="btn btn-outline-danger"
                                onClick={() => navigate('/dashboard')}
                            >
                                Quay v·ªÅ Dashboard
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        );
    }
    
    return (
        <div>
            <Header />
            <div className="confirmation-container">
                <div className="confirmation-card">
                    {/* Success Header */}
                    <div className="success-header text-center">
                        <div className="success-icon">üéâ</div>
                        <h1 className="success-title">Thanh to√°n th√†nh c√¥ng!</h1>
                        <p className="success-message">
                            ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω th√†nh c√¥ng. V√© ƒë√£ ƒë∆∞·ª£c t·∫°o v√† g·ª≠i ƒë·∫øn t√†i kho·∫£n c·ªßa b·∫°n.
                        </p>
                    </div>
                    
                    {/* Order Summary */}
                    <div className="order-summary">
                        <h3>üìã Th√¥ng tin ƒë∆°n h√†ng</h3>
                        <div className="order-details">
                            <div className="detail-row">
                                <span className="detail-label">M√£ ƒë∆°n h√†ng:</span>
                                <span className="detail-value">#{order.orderId}</span>
                            </div>
                            <div className="detail-row">
                                <span className="detail-label">S·ª± ki·ªán:</span>
                                <span className="detail-value">{order.event?.title || 'N/A'}</span>
                            </div>
                            <div className="detail-row">
                                <span className="detail-label">Lo·∫°i v√©:</span>
                                <span className="detail-value">{order.ticketType?.typeName || 'N/A'}</span>
                            </div>
                            <div className="detail-row">
                                <span className="detail-label">S·ªë l∆∞·ª£ng:</span>
                                <span className="detail-value">{order.quantity} v√©</span>
                            </div>
                            <div className="detail-row">
                                <span className="detail-label">T·ªïng ti·ªÅn:</span>
                                <span className="detail-value amount">{formatCurrency(order.amount)}</span>
                            </div>
                            <div className="detail-row">
                                <span className="detail-label">Tr·∫°ng th√°i:</span>
                                <span className="detail-value">
                                    <span className={`badge ${order.status === 'Paid' ? 'bg-success' : 'bg-warning'}`}>
                                        {order.status === 'Paid' ? 'ƒê√£ thanh to√°n' : order.status}
                                    </span>
                                </span>
                            </div>
                            <div className="detail-row">
                                <span className="detail-label">Ng√†y t·∫°o:</span>
                                <span className="detail-value">{formatDate(order.createdAt)}</span>
                            </div>
                        </div>
                    </div>
                    
                    {/* Payment Information */}
                    {location.state?.paymentResult && (
                        <div className="payment-info">
                            <h3>üí≥ Th√¥ng tin thanh to√°n</h3>
                            <div className="payment-details">
                                <div className="detail-row">
                                    <span className="detail-label">Ph∆∞∆°ng th·ª©c:</span>
                                    <span className="detail-value">
                                        {location.state.paymentMethod === 'wallet' ? 'V√≠ ƒëi·ªán t·ª≠' : location.state.paymentMethod}
                                    </span>
                                </div>
                                <div className="detail-row">
                                    <span className="detail-label">M√£ giao d·ªãch:</span>
                                    <span className="detail-value">{location.state.paymentResult.walletTransactionId || 'N/A'}</span>
                                </div>
                                <div className="detail-row">
                                    <span className="detail-label">S·ªë d∆∞ c√≤n l·∫°i:</span>
                                    <span className="detail-value">{formatCurrency(location.state.paymentResult.newWalletBalance || 0)}</span>
                                </div>
                            </div>
                        </div>
                    )}
                    
                    {/* Tickets Information */}
                    {tickets.length > 0 ? (
                        <div className="tickets-info">
                            <h3>üé´ V√© c·ªßa b·∫°n</h3>
                            <div className="tickets-list">
                                {tickets.map((ticket, index) => (
                                    <div key={ticket.ticketId} className="ticket-item">
                                        <div className="ticket-header">
                                            <span className="ticket-number">V√© #{index + 1}</span>
                                            <span className="ticket-status">
                                                <span className="badge bg-success">C√≥ th·ªÉ s·ª≠ d·ª•ng</span>
                                            </span>
                                        </div>
                                        <div className="ticket-details">
                                            <p><strong>M√£ v√©:</strong> {ticket.serialNumber}</p>
                                            <p><strong>Lo·∫°i v√©:</strong> {ticket.ticketType?.typeName}</p>
                                            <p><strong>Gi√°:</strong> {formatCurrency(ticket.ticketType?.price || 0)}</p>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        </div>
                    ) : (
                        <div className="tickets-info">
                            <h3>üé´ V√© c·ªßa b·∫°n</h3>
                            <div className="alert alert-info">
                                <p>V√© ƒëang ƒë∆∞·ª£c t·∫°o. B·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o khi v√© s·∫µn s√†ng.</p>
                                <p className="small text-muted">
                                    Th√¥ng th∆∞·ªùng v√© s·∫Ω ƒë∆∞·ª£c t·∫°o trong v√≤ng v√†i ph√∫t.
                                </p>
                            </div>
                        </div>
                    )}
                    
                    {/* Next Steps */}
                    <div className="next-steps">
                        <h3>üìù B∆∞·ªõc ti·∫øp theo</h3>
                        <div className="steps-list">
                            <div className="step-item">
                                <span className="step-number">1</span>
                                <div className="step-content">
                                    <strong>Ki·ªÉm tra email</strong>
                                    <p>Ch√∫ng t√¥i ƒë√£ g·ª≠i th√¥ng tin ƒë∆°n h√†ng ƒë·∫øn email c·ªßa b·∫°n</p>
                                </div>
                            </div>
                            <div className="step-item">
                                <span className="step-number">2</span>
                                <div className="step-content">
                                    <strong>Xem v√© c·ªßa b·∫°n</strong>
                                    <p>V√© ƒë√£ ƒë∆∞·ª£c l∆∞u trong t√†i kho·∫£n c·ªßa b·∫°n</p>
                                </div>
                            </div>
                            <div className="step-item">
                                <span className="step-number">3</span>
                                <div className="step-content">
                                    <strong>Tham gia s·ª± ki·ªán</strong>
                                    <p>Mang v√© ƒë·∫øn s·ª± ki·ªán ƒë·ªÉ check-in</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    {/* Action Buttons */}
                    <div className="action-buttons">
                        <button 
                            className="btn btn-outline-primary me-3"
                            onClick={() => navigate('/my-tickets')}
                        >
                            Xem v√© c·ªßa t√¥i
                        </button>
                        
                        <button 
                            className="btn btn-primary me-3"
                            onClick={() => navigate('/dashboard')}
                        >
                            V·ªÅ Dashboard
                        </button>
                        
                        <button 
                            className="btn btn-outline-secondary"
                            onClick={() => navigate('/')}
                        >
                            Xem s·ª± ki·ªán kh√°c
                        </button>
                    </div>
                    
                    {/* Support Information */}
                    <div className="support-info">
                        <p className="text-muted small">
                            üí¨ C·∫ßn h·ªó tr·ª£? Li√™n h·ªá ch√∫ng t√¥i qua email ho·∫∑c hotline.
                        </p>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default OrderConfirmationPage;
